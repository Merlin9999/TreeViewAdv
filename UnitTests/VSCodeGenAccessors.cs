// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Aga.Controls.Tree;
using BetterPrivateObject;
using System.Collections.ObjectModel;
using System.Drawing;

namespace Aga.Controls.UnitTests
{
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class BaseAccessor<T>
        where T : class
    {

        protected PrivateObject<T> _privateObject;
        private readonly T _target;

        protected BaseAccessor(T target)
        {
            this._privateObject = new PrivateObject<T>(target);
            this._target = target;
        }

        protected BaseAccessor() :
            this(null)
        {
        }

        internal virtual T Target
        {
            get
            {
                return _target;
            }
        }

        public override string ToString()
        {
            return this.Target.ToString();
        }

        public override bool Equals(object obj)
        {
            if (typeof(BaseAccessor<T>).IsInstanceOfType(obj))
            {
                obj = ((BaseAccessor<T>)(obj)).Target;
            }
            return this.Target.Equals(obj);
        }

        public override int GetHashCode()
        {
            return this.Target.GetHashCode();
        }
    }


    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Aga_Controls_Tree_TreeNodeAdvAccessor : BaseAccessor<TreeNodeAdv>
    {
        internal Aga_Controls_Tree_TreeNodeAdvAccessor(TreeNodeAdv target) :
                base(target)
        {
        }

        internal TreeViewAdv _tree
        {
            get
            {
                return (TreeViewAdv)((dynamic)this._privateObject)._tree;
            }
            set
            {
                ((dynamic)this._privateObject)._tree = value;
            }
        }

        internal global::Aga.Controls.Tree.TreeViewAdv Tree
        {
            get
            {
                return (TreeViewAdv)((dynamic)this._privateObject).Tree;
            }
        }

        internal int _row
        {
            get
            {
                return (int)((dynamic)this._privateObject)._row;
            }
            set
            {
                ((dynamic)this._privateObject)._row = value;
            }
        }

        internal int Row
        {
            get
            {
                return (int)((dynamic)this._privateObject).Row;
            }
            set
            {
                ((dynamic)this._privateObject).Row = value;
            }
        }

        internal int _index
        {
            get
            {
                return (int)((dynamic)this._privateObject)._index;
            }
            set
            {
                ((dynamic)this._privateObject)._index = value;
            }
        }

        internal bool _isSelected
        {
            get
            {
                return (bool)((dynamic)this._privateObject)._isSelected;
            }
            set
            {
                ((dynamic)this._privateObject)._isSelected = value;
            }
        }

        internal bool IsVisible
        {
            get
            {
                return (bool)((dynamic)this._privateObject).IsVisible;
            }
        }

        internal bool _isLeaf
        {
            get
            {
                return (bool)((dynamic)this._privateObject)._isLeaf;
            }
            set
            {
                ((dynamic)this._privateObject)._isLeaf = value;
            }
        }

        internal bool _isExpandedOnce
        {
            get
            {
                return (bool)((dynamic)this._privateObject)._isExpandedOnce;
            }
            set
            {
                ((dynamic)this._privateObject)._isExpandedOnce = value;
            }
        }

        internal bool _isExpanded
        {
            get
            {
                return (bool)((dynamic)this._privateObject)._isExpanded;
            }
            set
            {
                ((dynamic)this._privateObject)._isExpanded = value;
            }
        }

        internal TreeNodeAdv _parent
        {
            get
            {
                return (TreeNodeAdv)((dynamic)this._privateObject)._parent;
            }
            set
            {
                ((dynamic)this._privateObject)._parent = value;
            }
        }

        internal global::Aga.Controls.Tree.TreeNodeAdv BottomNode
        {
            get
            {
                return (TreeNodeAdv)((dynamic)this._privateObject).BottomNode;
            }
        }

        internal global::Aga.Controls.Tree.TreeNodeAdv NextVisibleNode
        {
            get
            {
                return (TreeNodeAdv)((dynamic)this._privateObject).NextVisibleNode;
            }
        }

        internal object _tag
        {
            get
            {
                return ((dynamic)this._privateObject)._tag;
            }
            set
            {
                ((dynamic)this._privateObject)._tag = value;
            }
        }

        internal Collection<TreeNodeAdv> Nodes
        {
            get
            {
                return (Collection<TreeNodeAdv>)((dynamic)this._privateObject).Nodes;
            }
        }

        internal Rectangle? _bounds
        {
            get
            {
                return (Rectangle?)((dynamic)this._privateObject)._bounds;
            }
            set
            {
                ((dynamic)this._privateObject)._bounds = value;
            }
        }

        internal Rectangle? Bounds
        {
            get
            {
                return (Rectangle?)((dynamic)this._privateObject).Bounds;
            }
            set
            {
                ((dynamic)this._privateObject).Bounds = value;
            }
        }

        //internal static TreeNodeAdv CreatePrivate(TreeViewAdv tree, object tag)
        //{
        //    object[] args = new object[] {
        //        tree,
        //        tag};
        //    PrivateObject priv_obj = new PrivateObject(typeof(TreeNodeAdv), new System.Type[] {
        //            typeof(TreeViewAdv),
        //            typeof(object)}, args);
        //    return ((TreeNodeAdv)(priv_obj.Target));
        //}

        //internal void SetIsExpanded(bool value, bool ignoreChildren)
        //{
        //    object[] args = new object[] {
        //        value,
        //        ignoreChildren};
        //    m_privateObject.Invoke("SetIsExpanded", new System.Type[] {
        //            typeof(bool),
        //            typeof(bool)}, args);
        //}

        //internal void SetIsExpandedRecursive(global::Aga.Controls.Tree.TreeNodeAdv root, bool value)
        //{
        //    object[] args = new object[] {
        //        root,
        //        value};
        //    m_privateObject.Invoke("SetIsExpandedRecursive", new System.Type[] {
        //            typeof(global::Aga.Controls.Tree.TreeNodeAdv),
        //            typeof(bool)}, args);
        //}

        //internal void AssignIsExpanded(bool value)
        //{
        //    object[] args = new object[] {
        //        value};
        //    m_privateObject.Invoke("AssignIsExpanded", new System.Type[] {
        //            typeof(bool)}, args);
        //}

        //internal static global::Aga.Controls.Tree.TreeNodeAdv CreatePrivate(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        //{
        //    object[] args = new object[] {
        //        info,
        //        context};
        //    Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(typeof(global::Aga.Controls.Tree.TreeNodeAdv), new System.Type[] {
        //            typeof(global::System.Runtime.Serialization.SerializationInfo),
        //            typeof(global::System.Runtime.Serialization.StreamingContext)}, args);
        //    return ((global::Aga.Controls.Tree.TreeNodeAdv)(priv_obj.Target));
        //}
    }
}
